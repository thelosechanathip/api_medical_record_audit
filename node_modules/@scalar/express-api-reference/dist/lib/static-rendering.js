const DEFAULT_CONFIGURATION = {
    _integration: 'express',
};
/**
 * The HTML document to render the Scalar API reference.
 */
function getHtmlDocument(options, customTheme) {
    return `
    <!DOCTYPE html>
    <html>
      <head>
        <title>Scalar API Reference</title>
        <meta charset="utf-8" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1" />
        <style>
          ${options.theme ? null : (customTheme)}
        </style>
      </head>
      <body>
        ${getScriptTags(options)}
      </body>
    </html>
  `;
}
/**
 * The script tags to load the @scalar/api-reference package from the CDN.
 */
function getScriptTags(configuration) {
    return `
      <script
        id="api-reference"
        type="application/json"
        data-configuration="${getConfiguration(configuration)}">${getScriptTagContent(configuration)}</script>
        <script src="${getCdnUrl(configuration)}"></script>
    `;
}
/**
 * The configuration to pass to the @scalar/api-reference package.
 */
function getConfiguration(givenConfiguration) {
    const configuration = {
        ...DEFAULT_CONFIGURATION,
        ...givenConfiguration,
    };
    if (!configuration.spec?.url) {
        delete configuration.spec;
    }
    else if (configuration.spec?.content) {
        delete configuration.spec?.content;
    }
    return JSON.stringify(configuration).split('"').join('&quot;');
}
/**
 * The content to pass to the @scalar/api-reference package as the <script> tag content.
 */
function getScriptTagContent(configuration) {
    return configuration.spec?.content
        ? typeof configuration.spec?.content === 'function'
            ? JSON.stringify(configuration.spec?.content())
            : JSON.stringify(configuration.spec?.content)
        : '';
}
/**
 * The CDN URL to load the @scalar/api-reference package from.
 */
function getCdnUrl(configuration) {
    return configuration.cdn || 'https://cdn.jsdelivr.net/npm/@scalar/api-reference';
}

export { getCdnUrl, getConfiguration, getHtmlDocument, getScriptTagContent, getScriptTags };
