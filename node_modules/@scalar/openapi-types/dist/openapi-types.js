/**
 * These types are copied from openapi-types, with two modifications:
 *
 * - all attributes are optional, you can’t rely on the specification for user input
 * - extensions (basically any attributes, not only prefixed with an `x-`) are allowed
 *
 * We deal with user input and can’t assume they really stick to any official specification.
 */
// biome-ignore lint/style/noNamespace: We want it to be a module here.
var OpenAPIV3;
(function (OpenAPIV3) {
    (function (HttpMethods) {
        HttpMethods["GET"] = "get";
        HttpMethods["PUT"] = "put";
        HttpMethods["POST"] = "post";
        HttpMethods["DELETE"] = "delete";
        HttpMethods["OPTIONS"] = "options";
        HttpMethods["HEAD"] = "head";
        HttpMethods["PATCH"] = "patch";
        HttpMethods["TRACE"] = "trace";
    })(OpenAPIV3.HttpMethods || (OpenAPIV3.HttpMethods = {}));
})(OpenAPIV3 || (OpenAPIV3 = {}));
// biome-ignore lint/style/noNamespace: We want it to be a module here.
var OpenAPIV2;
(function (OpenAPIV2) {
    (function (HttpMethods) {
        HttpMethods["GET"] = "get";
        HttpMethods["PUT"] = "put";
        HttpMethods["POST"] = "post";
        HttpMethods["DELETE"] = "delete";
        HttpMethods["OPTIONS"] = "options";
        HttpMethods["HEAD"] = "head";
        HttpMethods["PATCH"] = "patch";
    })(OpenAPIV2.HttpMethods || (OpenAPIV2.HttpMethods = {}));
})(OpenAPIV2 || (OpenAPIV2 = {}));

export { OpenAPIV2, OpenAPIV3 };
